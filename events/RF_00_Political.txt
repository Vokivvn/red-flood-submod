###########################
# Political Events
###########################

add_namespace = rf.political

#####################
### Returning Cores to Allies ###
#####################

# Which cores to return?
country_event = {
	id = rf.political.1
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.1" }
	title = rf.political.1.t
	desc = rf.political.1.d
	picture = GFX_report_event_generic_diplomacy2

	is_triggered_only = yes

	option = {
		name = rf.political.1.a #return all land
		ai_chance = {
			factor = 1
		}
		clr_country_flag = RF_returning_land
		custom_effect_tooltip = RF_will_return_all
		hidden_effect = {
			event_target:return_to = {
				country_event = rf.political.2
			}
		}
	}
	option = {
		name = rf.political.1.b #return all land but vital provinces
		trigger = {
			any_owned_state = {
				is_controlled_by = ROOT
				is_claim_or_core_of_ROOT = no
				is_important_state = yes
				NOT = { has_state_flag = RF_keeping_state@ROOT }
				OR = {
					NOT = { has_variable = ambition_area_@ROOT }
					AND = {
						ROOT = { tag = ENG }
						is_british_colonial_claim = yes
					}
					ROOT = { is_ai = no }
				}
				OR = {
					is_core_of = event_target:return_to
					is_claimed_by = event_target:return_to
				}
			}
		}
		ai_chance = {
			factor = 100
		}
		custom_effect_tooltip = RF_will_return_rest
		hidden_effect = {
			clr_country_flag = RF_returning_land
			every_owned_state = {
				limit = {
					is_claim_or_core_of_ROOT = no
					is_important_state = yes
					NOT = { has_state_flag = RF_keeping_state@ROOT }
					OR = {
						AND = {
							ROOT = { tag = ENG }
							is_british_colonial_claim = yes
						}
						ROOT = { is_ai = no }
					}
					NOT = { has_variable = ambition_area_@ROOT }
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
				}
				set_state_flag = RF_keeping_state@ROOT
			}
			if = {
				limit = {
					any_owned_state = {
						is_claim_or_core_of_ROOT = no
						is_important_state = no
						NOT = { has_state_flag = RF_keeping_state@ROOT }
						OR = {
							any_neighbor_state = { is_owned_by = event_target:return_to }
							is_coastal = yes
						}
						OR = {
							NOT = { has_variable = ambition_area_@ROOT }
							AND = {
								ROOT = { tag = ENG }
								is_british_colonial_claim = yes
							}
							ROOT = { is_ai = no }
						}
						OR = {
							is_core_of = event_target:return_to
							is_claimed_by = event_target:return_to
						}
					}
				}
				event_target:return_to = {
					country_event = rf.political.2
				}
			}
		}
	}
	option = {
		name = rf.political.1.c #return cores only
		trigger = {
			is_ai = no
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = { has_state_flag = RF_keeping_state@ROOT 	}
				is_core_of = event_target:return_to
			}
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = { has_state_flag = RF_keeping_state@ROOT 	}
				NOT = { is_core_of = event_target:return_to }
				is_claimed_by = event_target:return_to
			}
		}
		custom_effect_tooltip = RF_will_return_cores
		hidden_effect = {
			clr_country_flag = RF_returning_land
			every_owned_state = {
				limit = {
					is_claim_or_core_of_ROOT = no
					NOT = { has_state_flag = RF_keeping_state@ROOT }
					NOT = { is_core_of = event_target:return_to }
					is_claimed_by = event_target:return_to
				}
				set_state_flag = RF_keeping_state@ROOT
			}
			event_target:return_to = {
				country_event = rf.political.2
			}
		}
	}
	option = {
		name = rf.political.1.e #keep it all you pig
		trigger = {
			is_ai = no
		}
		clr_country_flag = RF_returning_land
		custom_effect_tooltip = RF_will_not_return
		hidden_effect = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
					is_claim_or_core_of_ROOT = no
					NOT = { has_state_flag = RF_keeping_state@ROOT }
				}
				set_state_flag = Rf_keeping_state@ROOT
			}
		}
	}
}

# Cores/claims have been returned by an ally
country_event = {
	id = rf.political.2
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.2" }
	title = rf.political.2.t
	desc = rf.political.2.d
	picture = GFX_report_event_generic_diplomacy2

	is_triggered_only = yes

	option = {
		name = rf.political.2.a
		#add_opinion_modifier = {
		#	target = FROM
		#	modifier = RF_returned_land
		#}
		while_loop_effect = {
			limit = {
				any_state = {
					is_owned_by = FROM
					is_claim_or_core_of_ROOT = yes
					is_claim_or_core_of_FROM = no
					OR = {
						any_neighbor_state = { is_owned_by = ROOT }
						is_coastal = yes
					}
					OR = {
						NOT = { has_variable = ambition_area_@FROM }
						AND = {
							ROOT = { tag = ENG }
							is_british_colonial_claim = yes
						}
						FROM = { is_ai = no }
					}
					NOT = { has_state_flag = RF_keeping_state@FROM }
				}
			}
			every_state = {
				limit = {
					is_owned_by = FROM
					is_claim_or_core_of_ROOT = yes
					is_claim_or_core_of_FROM = no
					OR = {
						any_neighbor_state = { is_owned_by = ROOT }
						is_coastal = yes
					}
					OR = {
						NOT = { has_variable = ambition_area_@FROM }
						AND = {
							ROOT = { tag = ENG }
							is_british_colonial_claim = yes
						}
						FROM = { is_ai = no }
					}
					NOT = { has_state_flag = RF_keeping_state@FROM }
				}
				transfer_to_ROOT = yes
			}
		}
	}
}
#
country_event = {
	id = rf.political.3
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.3" }

	hidden = yes
	is_triggered_only = yes
	fire_only_once = yes

	immediate = {

		create_ambition_areas = yes

	}
}


##################################
###     White Peace Events     ###
##################################

# Error checking to make sure subordinate countries peace out with the target
country_event = {
	id = rf.political.205
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.205" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_war_with = FROM
	}

	immediate = {
		white_peace = FROM
	}
}

country_event = {
	id = rf.political.206
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.206" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_war_with = event_target:peace_country
	}

	immediate = {
		white_peace = event_target:peace_country
	}
}

country_event = {
	id = rf.political.207
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.207" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_war_with = event_target:white_peace_receiver
	}

	immediate = {
		white_peace = event_target:white_peace_receiver
	}
}

country_event = {
	id = rf.political.208
	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.208" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		event_target:factionhead = { is_faction_leader = yes }
		is_in_faction = no
		is_subject = no
	}

	immediate = {
		set_global_flag = TEMPORARY_DISABLED_FACTION_POPUP
		event_target:factionhead = { add_to_faction = ROOT }
	}
}

# Dynamically add operative nationalities
#country_event = {
#	id = rf.political.209
#	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.209" }
#
#	hidden = yes
#	is_triggered_only = yes
#
#	immediate = {
#		every_country = {
#			limit = { has_intelligence_agency = yes }
#			every_operative = { add_operative_nationalities = yes }
#		}
#	}
#}

# Calculate sent expeditionary force variables
#country_event = {
#	id = rf.political.210
#	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.210" }
#
#	hidden = yes
#	is_triggered_only = yes
#
#	option = {
#		set_variable = { expeditionary_division_sent = 0 }
#		for_each_scope_loop = {
#			array = faction_members
#			if = {
#				limit = {
#					received_expeditionary_forces = { sender = ROOT value > 0 }
#				}
#				while_loop_effect = {
#					limit = {
#						received_expeditionary_forces = { sender = ROOT value > expeditionary_division_sent }
#					}
#					add_to_variable = { expeditionary_division_sent = 1 }
#				}
#			}
#		}
#		calculate_actual_division_number = yes
#	}
#}

# Calculate received expeditionary force variables
#country_event = {
#	id = rf.political.211
#	immediate = { log = "[GetDateText]: [Root.GetName]: event rf.political.211" }
#
#	hidden = yes
#	is_triggered_only = yes
#
#	option = {
#		set_variable = { num_expeditionary_divisions_received = 0 }
#		for_each_loop = {
#			array = faction_members
#			if = {
#				limit = {
#					received_expeditionary_forces = { sender = var:v value > 0 }
#				}
#				set_temp_variable = { expeditionary_division_received_temp = 0 }
#				while_loop_effect = {
#					limit = {
#						received_expeditionary_forces = { sender = var:v value > expeditionary_division_received_temp }
#					}
#					add_to_temp_variable = { expeditionary_division_received_temp = 1 }
#				}
#				add_to_variable = { num_expeditionary_divisions_received = expeditionary_division_received_temp }
#			}
#		}
#		calculate_actual_division_number = yes
#	}
#}